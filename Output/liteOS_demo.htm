<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [..\Output\liteOS_demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image ..\Output\liteOS_demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Fri Oct 20 17:27:36 2023
<BR><P>
<H3>Maximum Stack Usage =        376 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[155]">__user_initial_stackheap</a>
 <LI><a href="#[123]">LOS_StartToRun</a>
 <LI><a href="#[99]">LOS_IntLock</a>
 <LI><a href="#[1a8]">LOS_IntUnLock</a>
 <LI><a href="#[9a]">LOS_IntRestore</a>
 <LI><a href="#[12e]">osTaskSchedule</a>
 <LI><a href="#[13]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[27]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[27]">ADC1_2_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[27]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">BusFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">DebugMon_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">MemManage_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">PendSV_Handler</a> from los_dispatch_keil.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">SVC_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">SysTick_Handler</a> from los_hwi.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[17]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USART1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">USART2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">UsageFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[58]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[57]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[56]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[54]">osIdleTask</a> from los_task.o(.text) referenced from los_task.o(.text)
 <LI><a href="#[8a]">osSwTmrTask</a> from los_swtmr.o(.text) referenced from los_swtmr.o(.text)
 <LI><a href="#[55]">osTaskEntry</a> from los_task.o(.text) referenced from los_hw.o(.text)
 <LI><a href="#[130]">osTaskExit</a> from los_hw.o(.text) referenced from los_hw.o(.text)
 <LI><a href="#[c0]">osTaskSwitchCheck</a> from los_task.o(.text) referenced from los_task.o(.text)
 <LI><a href="#[53]">test_task</a> from main.o(.text) referenced from main.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[5b]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[176]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[177]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[5c]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[178]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[5d]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[143]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[5f]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[61]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[63]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[179]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[6e]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[17a]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[65]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[17b]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[17f]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[180]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[181]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[182]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[183]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[184]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[185]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[186]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[187]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[67]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[188]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[189]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[18a]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[18b]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[18c]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[18d]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[18e]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[73]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[18f]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[69]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[190]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[191]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[192]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[193]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[194]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[195]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[5a]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[196]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6b]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6d]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[197]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6f]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[198]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[162]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[72]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[199]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[74]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[b]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[27]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[155]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[51]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[19b]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>main</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376 + Unknown Stack Size
<LI>Call Chain = main &rArr; LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Test_Task
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[c]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>osPriqueueInit</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[85]"></a>osPriqueueEnqueue</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, los_priqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
</UL>

<P><STRONG><a name="[87]"></a>osPriqueueDequeue</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, los_priqueue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osPriqueueDequeue
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
</UL>

<P><STRONG><a name="[bd]"></a>osPriqueueTop</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, los_priqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[89]"></a>osPriqueueSize</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_priqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTotalSize
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>

<P><STRONG><a name="[88]"></a>osPriqueueTotalSize</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, los_priqueue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
</UL>

<P><STRONG><a name="[8a]"></a>osSwTmrTask</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, los_swtmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = osSwTmrTask &rArr; LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TickCountGet
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_swtmr.o(.text)
</UL>
<P><STRONG><a name="[8d]"></a>osSwTmrTaskCreate</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, los_swtmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[8f]"></a>osSwTmrInit</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, los_swtmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[94]"></a>osSwTmrStart</STRONG> (Thumb, 506 bytes, Stack size 40 bytes, los_swtmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osSwTmrStart
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
</UL>

<P><STRONG><a name="[9c]"></a>osSwtmrStop</STRONG> (Thumb, 116 bytes, Stack size 20 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
</UL>

<P><STRONG><a name="[95]"></a>osSwtmrScan</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_swtmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[97]"></a>osSwtimerInsert</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrAdjust
</UL>

<P><STRONG><a name="[96]"></a>osSwTmrAdjust</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtimerInsert
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[9f]"></a>osSwtmrTimeGet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrTimeGet
</UL>

<P><STRONG><a name="[98]"></a>LOS_SwtmrCreate</STRONG> (Thumb, 178 bytes, Stack size 40 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[9b]"></a>LOS_SwtmrStart</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[9d]"></a>LOS_SwtmrStop</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[9e]"></a>LOS_SwtmrTimeGet</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrTimeGet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[a0]"></a>LOS_SwtmrDelete</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, los_swtmr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrStop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[8c]"></a>LOS_TickCountGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sys.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[19c]"></a>LOS_CyclePerTickGet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sys.o(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>LOS_MS2Tick</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, los_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Msleep
</UL>

<P><STRONG><a name="[a3]"></a>LOS_Tick2MS</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, los_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[a4]"></a>osCpuTick2MS</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, los_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[a9]"></a>osCpuTick2US</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, los_sys.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>

<P><STRONG><a name="[54]"></a>osIdleTask</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, los_task.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>osTaskPriModify</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
</UL>

<P><STRONG><a name="[ab]"></a>osTaskAdd2TimerList</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>

<P><STRONG><a name="[ad]"></a>osTimerListDelete</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>

<P><STRONG><a name="[af]"></a>osTaskScan</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = osTaskScan &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[b3]"></a>osConvertTskStatus</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
</UL>

<P><STRONG><a name="[b1]"></a>osGetTaskWaterLine</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
</UL>

<P><STRONG><a name="[b2]"></a>osGetAllTskInfo</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetTaskWaterLine
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osConvertTskStatus
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoMonitor
</UL>

<P><STRONG><a name="[b4]"></a>osTaskInit</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = osTaskInit &rArr; osPriqueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[b6]"></a>LOS_TaskCreateOnly</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Align
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[7d]"></a>LOS_TaskCreate</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Creat_Test_Task
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
</UL>

<P><STRONG><a name="[bf]"></a>osIdleTaskCreate</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = osIdleTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[19d]"></a>LOS_CurTaskIDGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, los_task.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>LOS_NextTaskIDGet</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, los_task.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>LOS_CurTaskNameGet</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_task.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>osTaskSwitchCheck</STRONG> (Thumb, 454 bytes, Stack size 8 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = osTaskSwitchCheck &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_task.o(.text)
</UL>
<P><STRONG><a name="[c2]"></a>osTaskMonInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osTaskMonInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[c4]"></a>LOS_TaskDelete</STRONG> (Thumb, 334 bytes, Stack size 24 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelete &rArr; LOS_MemFree &rArr; osHeapFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskEntry
</UL>

<P><STRONG><a name="[55]"></a>osTaskEntry</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = osTaskEntry &rArr; LOS_TaskDelete &rArr; LOS_MemFree &rArr; osHeapFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(.text)
</UL>
<P><STRONG><a name="[c5]"></a>LOS_TaskResume</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[c6]"></a>LOS_TaskSuspend</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[c7]"></a>LOS_TaskYield</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueSize
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
</UL>

<P><STRONG><a name="[7b]"></a>LOS_TaskDelay</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Msleep
</UL>

<P><STRONG><a name="[c9]"></a>LOS_TaskPriGet</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[ca]"></a>LOS_TaskPriSet</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_CurTaskPriSet
</UL>

<P><STRONG><a name="[cb]"></a>LOS_CurTaskPriSet</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
</UL>

<P><STRONG><a name="[cc]"></a>osTaskWait</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osTaskWait &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[cd]"></a>osTaskWake</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osTaskWake &rArr; osTimerListDelete
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[ce]"></a>LOS_TaskLock</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[cf]"></a>LOS_TaskUnlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[d0]"></a>LOS_TaskInfoGet</STRONG> (Thumb, 250 bytes, Stack size 24 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[d2]"></a>LOS_TaskStatusGet</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[d3]"></a>LOS_TaskSwitchInfoGet</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[d4]"></a>LOS_TaskInfoMonitor</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
</UL>

<P><STRONG><a name="[1a0]"></a>LOS_TaskIsRunning</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_task.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>LOS_NewTaskIDGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>LOS_TaskNameGet</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, los_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[d6]"></a>osTickHandler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceCheck
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1a2]"></a>LOS_SysClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_tick.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>osTimesliceInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_timeslice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[d7]"></a>osTimesliceCheck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, los_timeslice.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = osTimesliceCheck &rArr; LOS_TaskYield &rArr; osPriqueueEnqueue
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>

<P><STRONG><a name="[d8]"></a>osMuxInit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, los_mux.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osMuxInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[db]"></a>LOS_MuxCreate</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, los_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>

<P><STRONG><a name="[de]"></a>LOS_MuxDelete</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, los_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>

<P><STRONG><a name="[df]"></a>LOS_MuxPend</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, los_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[e0]"></a>LOS_MuxPost</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, los_mux.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskPriModify
</UL>

<P><STRONG><a name="[e1]"></a>osQueueInit</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osQueueInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[90]"></a>LOS_QueueCreate</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = LOS_QueueCreate &rArr; LOS_MemFree &rArr; osHeapFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
</UL>

<P><STRONG><a name="[e8]"></a>osQueueOperate</STRONG> (Thumb, 440 bytes, Stack size 64 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHeadCopy
</UL>

<P><STRONG><a name="[8b]"></a>LOS_QueueReadCopy</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = LOS_QueueReadCopy &rArr; osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTask
</UL>

<P><STRONG><a name="[e9]"></a>LOS_QueueWriteHeadCopy</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHead
</UL>

<P><STRONG><a name="[92]"></a>LOS_QueueWriteCopy</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
</UL>

<P><STRONG><a name="[ea]"></a>LOS_QueueRead</STRONG> (Thumb, 54 bytes, Stack size 48 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>

<P><STRONG><a name="[eb]"></a>LOS_QueueWrite</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
</UL>

<P><STRONG><a name="[ec]"></a>LOS_QueueWriteHead</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHeadCopy
</UL>

<P><STRONG><a name="[ed]"></a>osQueueMailAlloc</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
</UL>

<P><STRONG><a name="[ef]"></a>osQueueMailFree</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>

<P><STRONG><a name="[f1]"></a>LOS_QueueDelete</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>

<P><STRONG><a name="[f2]"></a>LOS_QueueInfoGet</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, los_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[f3]"></a>osSemInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, los_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osSemInit &rArr; LOS_MemAlloc &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[f6]"></a>osSemCreate</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, los_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemCreate
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_BinarySemCreate
</UL>

<P><STRONG><a name="[f8]"></a>LOS_SemCreate</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, los_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[f9]"></a>LOS_BinarySemCreate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, los_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[fa]"></a>LOS_SemDelete</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, los_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
</UL>

<P><STRONG><a name="[fb]"></a>LOS_SemPend</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, los_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[fc]"></a>LOS_SemPost</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, los_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListEmpty
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ErrHandle
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
</UL>

<P><STRONG><a name="[101]"></a>osHeapPrvGetNext</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, los_heap.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[fd]"></a>osHeapInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, los_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osHeapInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[ff]"></a>osHeapStatisticsGet</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, los_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osHeapStatisticsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemStatisticsGet
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[fe]"></a>osAlarmHeapInfo</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, los_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osAlarmHeapInfo &rArr; osHeapStatisticsGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemPoolList
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>

<P><STRONG><a name="[100]"></a>osHeapAlloc</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, los_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
</UL>

<P><STRONG><a name="[102]"></a>osHeapAllocAlign</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, los_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAllocAlign
</UL>

<P><STRONG><a name="[103]"></a>osHeapFree</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, los_heap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = osHeapFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapPrvGetNext
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorDestroy
</UL>

<P><STRONG><a name="[1a3]"></a>osHeapGetHeapMemoryPeak</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_heap.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>osHeapGetMaxFreeBlkSize</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, los_heap.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemGetMaxFreeBlkSize
</UL>

<P><STRONG><a name="[104]"></a>osAtomicBitsetInit</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, los_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osAtomicBitsetInit &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>

<P><STRONG><a name="[10b]"></a>osAtomicBitsetGetBit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, los_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorCheck
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetUsedItemCnt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetIndex
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetNth
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[10c]"></a>osAtomicBitsetClearBit</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, los_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = osAtomicBitsetClearBit
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[108]"></a>osAtomicBitsetFindClearAndSet</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, los_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>

<P><STRONG><a name="[1a4]"></a>osAtomicBitsetIdxChgToNatural</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, los_slab.o(.text), UNUSED)

<P><STRONG><a name="[111]"></a>osAtomicBitsetEmpty</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorEmpty
</UL>

<P><STRONG><a name="[105]"></a>osSlabAllocatorNew</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, los_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = osSlabAllocatorNew &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>

<P><STRONG><a name="[106]"></a>osSlabAllocatorDestroy</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemDeinit
</UL>

<P><STRONG><a name="[107]"></a>osSlabAllocatorAlloc</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, los_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetFindClearAndSet
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[109]"></a>osSlabAllocatorFree</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, los_slab.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetClearBit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
</UL>

<P><STRONG><a name="[10d]"></a>osSlabAllocatorGetNth</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>

<P><STRONG><a name="[1a5]"></a>osSlabAllocatorGetIdxP</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, los_slab.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>osSlabAllocatorGetIndex</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>

<P><STRONG><a name="[10f]"></a>osSlabAllocatorGetNumItems</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
</UL>

<P><STRONG><a name="[110]"></a>osSlabAllocatorEmpty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetEmpty
</UL>

<P><STRONG><a name="[112]"></a>osSlabAllocatorGetUsedItemCnt</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
</UL>

<P><STRONG><a name="[113]"></a>osSlabAllocatorGetSlabInfo</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetUsedItemCnt
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabGetMaxFreeBlkSize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabStatisticsGet
</UL>

<P><STRONG><a name="[114]"></a>osSlabAllocatorCheck</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, los_slab.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetNumBits
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetGetBit
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
</UL>

<P><STRONG><a name="[118]"></a>osSlabBlockHeadFill</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, los_slabmem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
</UL>

<P><STRONG><a name="[115]"></a>osSlabMemInit</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, los_slabmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorNew
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>

<P><STRONG><a name="[117]"></a>osSlabMemAlloc</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, los_slabmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = osSlabMemAlloc &rArr; osSlabAllocatorAlloc &rArr; osAtomicBitsetFindClearAndSet
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabBlockHeadFill
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
</UL>

<P><STRONG><a name="[119]"></a>osSlabMemFree</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, los_slabmem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = osSlabMemFree &rArr; osSlabAllocatorFree &rArr; osAtomicBitsetClearBit
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
</UL>

<P><STRONG><a name="[11a]"></a>osSlabMemDeinit</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, los_slabmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorDestroy
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemDeInit
</UL>

<P><STRONG><a name="[11b]"></a>osSlabMemCheck</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, los_slabmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
</UL>

<P><STRONG><a name="[11c]"></a>osSlabStatisticsGet</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, los_slabmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemStatisticsGet
</UL>

<P><STRONG><a name="[11d]"></a>osSlabGetMaxFreeBlkSize</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, los_slabmem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabCtrlHdrGet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemGetMaxFreeBlkSize
</UL>

<P><STRONG><a name="[11e]"></a>LOS_MemboxInit</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, los_membox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[ee]"></a>LOS_MemboxAlloc</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, los_membox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
</UL>

<P><STRONG><a name="[f0]"></a>LOS_MemboxFree</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, los_membox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
</UL>

<P><STRONG><a name="[11f]"></a>LOS_MemboxClr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, los_membox.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1a6]"></a>LOS_MemboxStatisticsGet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, los_membox.o(.text), UNUSED)

<P><STRONG><a name="[b7]"></a>LOS_Align</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, los_misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[120]"></a>LOS_Msleep</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, los_misc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
</UL>

<P><STRONG><a name="[dd]"></a>LOS_ErrHandle</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, los_err.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[1a7]"></a>osEnableFPU</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_init.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>LOS_Reboot</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_init.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[82]"></a>LOS_Start</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, los_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = LOS_Start &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickStart
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_StartToRun
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[80]"></a>LOS_KernelInit</STRONG> (Thumb, 174 bytes, Stack size 8 bytes, los_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = LOS_KernelInit &rArr; osSwTmrInit &rArr; osSwTmrTaskCreate &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRegister
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimesliceInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[116]"></a>osSlabCtrlHdrGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_memory.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabGetMaxFreeBlkSize
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabStatisticsGet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemDeinit
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
</UL>

<P><STRONG><a name="[127]"></a>LOS_MemInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, los_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMemSystemInit
</UL>

<P><STRONG><a name="[125]"></a>osMemSystemInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, los_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = osMemSystemInit &rArr; LOS_MemInit &rArr; osSlabMemInit &rArr; osSlabAllocatorNew &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[128]"></a>LOS_MemDeInit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, los_memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemDeinit
</UL>

<P><STRONG><a name="[129]"></a>LOS_MemPoolList</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, los_memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
</UL>

<P><STRONG><a name="[84]"></a>LOS_MemAlloc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, los_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LOS_MemAlloc &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[bb]"></a>LOS_MemAllocAlign</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, los_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAllocAlign
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[b9]"></a>LOS_MemFree</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, los_memory.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = LOS_MemFree &rArr; osHeapFree &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[12a]"></a>LOS_MemRealloc</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, los_memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemFree
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemAlloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[12b]"></a>LOS_MemStatisticsGet</STRONG> (Thumb, 102 bytes, Stack size 56 bytes, los_memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabStatisticsGet
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapStatisticsGet
</UL>

<P><STRONG><a name="[12c]"></a>LOS_MemGetMaxFreeBlkSize</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, los_memory.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabGetMaxFreeBlkSize
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapGetMaxFreeBlkSize
</UL>

<P><STRONG><a name="[123]"></a>LOS_StartToRun</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[99]"></a>LOS_IntLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrTimeGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriGet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetSystickCycle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetCpuCycle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SysTickCurrCycleGet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemDeInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Reboot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueInfoGet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSwitchInfoGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskStatusGet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[1a8]"></a>LOS_IntUnLock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>LOS_IntRestore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrTimeGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriGet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskLock
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStop
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrStart
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrCreate
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetSystickCycle
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_GetCpuCycle
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SysTickCurrCycleGet
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemDeInit
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxInit
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemCheck
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemFree
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabMemAlloc
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxFree
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxAlloc
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueInfoGet
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskNameGet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSwitchInfoGet
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskStatusGet
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoGet
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[12e]"></a>osTaskSchedule</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSchedule
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Schedule
</UL>

<P><STRONG><a name="[13]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, los_dispatch_keil.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>osSchedule</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, los_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = osSchedule
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>

<P><STRONG><a name="[b0]"></a>LOS_Schedule</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, los_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = LOS_Schedule
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueTop
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSchedule
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskUnlock
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSuspend
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskResume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskPriSet
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
</UL>

<P><STRONG><a name="[130]"></a>osTaskExit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_hw.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> los_hw.o(.text)
</UL>
<P><STRONG><a name="[bc]"></a>osTskStackInit</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, los_hw.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = osTskStackInit
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[1a9]"></a>osEnterSleep</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, los_hw.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>osTickStart</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, los_hw_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osTickStart
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
</UL>

<P><STRONG><a name="[131]"></a>LOS_SysTickCurrCycleGet</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, los_hw_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[132]"></a>LOS_GetCpuCycle</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, los_hw_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[133]"></a>LOS_GetSystickCycle</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, los_hw_tick.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntRestore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_IntLock
</UL>

<P><STRONG><a name="[c8]"></a>osIntNumGet</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_hwi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Msleep
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailAlloc
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueWriteParameterCheck
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueReadParameterCheck
</UL>

<P><STRONG><a name="[14]"></a>SysTick_Handler</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, los_hwi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; osTickHandler &rArr; osSwtmrScan &rArr; osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTickHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ab]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[134]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[1ac]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ad]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1af]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b0]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b1]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b2]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b3]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b4]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b5]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b6]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b7]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b8]"></a>RCC_LSEConfig</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1b9]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1ba]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bb]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bc]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1bd]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[1be]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[1bf]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c2]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c4]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[1c5]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[138]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[13a]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
</UL>

<P><STRONG><a name="[1c6]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c7]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1c8]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[1c9]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Init
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[7a]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;test_task
</UL>

<P><STRONG><a name="[1ca]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cb]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cd]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d0]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[7e]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d2]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>NVIC_SystemLPConfig</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>LED_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LED_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MS2Tick
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Tick2MS
</UL>

<P><STRONG><a name="[1d6]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[81]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPend
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPend
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_Start
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemInit
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapFree
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapAlloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetAllTskInfo
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osGetTaskWaterLine
</UL>

<P><STRONG><a name="[13d]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[13e]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[13c]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[60]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[140]"></a>_printf_longlong_hex</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[62]"></a>_printf_int_hex</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5e]"></a>_printf_hex_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_hex_int_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[141]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemRealloc
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueBufferOperate
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskSwitchInfoGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskSwitchCheck
</UL>

<P><STRONG><a name="[144]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1d7]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTskStackInit
</UL>

<P><STRONG><a name="[c3]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MemboxClr
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osHeapInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskMonInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[147]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[146]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrInit
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTaskCreate
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAtomicBitsetInit
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osAlarmHeapInfo
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueInfoGet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIdleTaskCreate
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1d8]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1d9]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[d1]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskInfoGet
</UL>

<P><STRONG><a name="[1da]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[13f]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[149]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[14a]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[64]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[13b]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[1db]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[14c]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[68]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[6a]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[152]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[161]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[16c]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1de]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[15b]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[16b]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1df]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[15a]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[6c]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[151]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[157]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[171]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1e0]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[14d]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[15f]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[150]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1e1]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[14e]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1e2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1e3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1e6]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[156]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1e7]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[165]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[167]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[66]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[15c]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[15e]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1e9]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[15d]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[160]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[158]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[164]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[163]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[153]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[75]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[169]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[9]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[16a]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1ea]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[168]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[16f]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[16e]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1eb]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[142]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[56]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[10a]"></a>osAtomicBitsetGetNumBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_slab.o(i.osAtomicBitsetGetNumBits))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorCheck
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetSlabInfo
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetNumItems
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorGetIndex
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSlabAllocatorFree
</UL>

<P><STRONG><a name="[a6]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2US
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2MS
</UL>

<P><STRONG><a name="[172]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2US
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2MS
</UL>

<P><STRONG><a name="[1ed]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[a7]"></a>__aeabi_ul2d</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2US
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2MS
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_uto_d</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, dfltll_clz.o(x$fpl$dfltull), UNUSED)

<P><STRONG><a name="[174]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_ufrom_d
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[173]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
</UL>

<P><STRONG><a name="[a8]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2US
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osCpuTick2MS
</UL>

<P><STRONG><a name="[175]"></a>_ll_ufrom_d</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dfixull.o(x$fpl$llufromd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[77]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[76]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[53]"></a>test_task</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = test_task &rArr; LOS_TaskDelay &rArr; osTaskAdd2TimerList &rArr; LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelay
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadOutputDataBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text)
</UL>
<P><STRONG><a name="[7c]"></a>Creat_Test_Task</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = Creat_Test_Task &rArr; LOS_TaskCreate &rArr; LOS_TaskCreateOnly &rArr; LOS_MemAllocAlign &rArr; osHeapAllocAlign &rArr; osHeapAlloc &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreate
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[86]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_priqueue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueDequeue
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osPriqueueEnqueue
</UL>

<P><STRONG><a name="[93]"></a>osSwtmrDelete</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, los_swtmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osSwtmrDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrTimeoutHandle
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SwtmrDelete
</UL>

<P><STRONG><a name="[91]"></a>osSwTmrTimeoutHandle</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, los_swtmr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = osSwTmrTimeoutHandle &rArr; LOS_QueueWriteCopy &rArr; osQueueOperate &rArr; osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrStart
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrDelete
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwTmrAdjust
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSwtmrScan
</UL>

<P><STRONG><a name="[b8]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListTailInsert
</UL>

<P><STRONG><a name="[ae]"></a>LOS_ListDelete</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, los_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskYield
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWake
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskScan
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTimerListDelete
</UL>

<P><STRONG><a name="[b5]"></a>LOS_ListInit</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, los_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
</UL>

<P><STRONG><a name="[ac]"></a>LOS_ListTailInsert</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, los_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOS_ListTailInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_ListAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskDelete
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskWait
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskInit
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osTaskAdd2TimerList
</UL>

<P><STRONG><a name="[ba]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_TaskCreateOnly
</UL>

<P><STRONG><a name="[da]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_mux.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[d9]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_mux.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMuxInit
</UL>

<P><STRONG><a name="[dc]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_mux.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxPost
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxDelete
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_MuxCreate
</UL>

<P><STRONG><a name="[e3]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>

<P><STRONG><a name="[e5]"></a>osQueueReadParameterCheck</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osQueueReadParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueReadCopy
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueRead
</UL>

<P><STRONG><a name="[e6]"></a>osQueueWriteParameterCheck</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osQueueWriteParameterCheck
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osIntNumGet
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteCopy
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWrite
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueWriteHeadCopy
</UL>

<P><STRONG><a name="[e7]"></a>osQueueBufferOperate</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, los_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = osQueueBufferOperate &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[e2]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueInit
</UL>

<P><STRONG><a name="[e4]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueDelete
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_QueueCreate
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueMailFree
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osQueueOperate
</UL>

<P><STRONG><a name="[f5]"></a>LOS_ListAdd</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, los_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
</UL>

<P><STRONG><a name="[f4]"></a>LOS_ListInit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, los_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemInit
</UL>

<P><STRONG><a name="[f7]"></a>LOS_ListEmpty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, los_sem.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemPost
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_SemDelete
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemCreate
</UL>

<P><STRONG><a name="[124]"></a>osRegister</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, los_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOS_KernelInit
</UL>

<P><STRONG><a name="[57]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
